{"version":3,"sources":["screens/home/item.tsx","store/actions/todos.tsx","store/types.tsx","screens/home/list.tsx","screens/home/footer.tsx","store/actions/history.tsx","screens/home/undo.tsx","screens/home/index.tsx","store/reducers/todos.tsx","store/reducers/index.tsx","store/index.tsx","store/reducers/history.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["connect","dispatch","onToggle","todo","isCompleted","phet","Object","objectSpread","updatedTodo","type","payload","updateTodo","onDestroy","removeTodo","props","react","className","concat","checked","onChange","title","onClick","ListTodo","_ref","todos","map","item","key","createdAt","Footer","clearButton","completedCount","onClearCompleted","switchFilter","visibility","updateVisibilityFilter","nowShowing","count","href","event","preventDefault","classNames","selected","UndoRedoConnected","state","canUndo","past","length","canRedo","future","onUndo","onRedo","react_default","a","createElement","style","display","justifyContent","alignItems","height","paddingLeft","paddingRight","disabled","Home","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNewTodoKeyDown","keyCode","input","addTodo","setState","filter","_this2","activeList","ref","value","onKeyDown","placeholder","target","currentTarget","home_undo","list_ListTodo","clearAllDone","React","present","visibilityFilter","Date","toISOString","todoInitialState","reducer","combineReducers","arguments","undefined","action","toConsumableArray","removedTodo","newTodos","_action$payload","newList","persistConfig","storage","persistedReducer","persistReducer","historyInitialState","previous","slice","next","newFuture","newPresent","undoable","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","App","es","integration_react","loading","home","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f0b5874.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { ITodo } from \"../../typings\";\nimport { removeTodo, updateTodo } from \"../../store/actions/todos\";\nimport { connect } from \"react-redux\";\n\nexport interface IToDoItemProps {\n  todo: ITodo;\n  onToggle: (todo: ITodo, isCompleted: boolean) => any;\n  onDestroy: (todo: ITodo) => any;\n}\n\nconst ToDoItem = (props: IToDoItemProps) => {\n  return (\n    <li className={`${props.todo.isCompleted ? \"completed\" : \"\"}`}>\n      <div className=\"view\">\n        <input\n          className=\"toggle\"\n          type=\"checkbox\"\n          checked={props.todo.isCompleted}\n          onChange={() => props.onToggle(props.todo, !props.todo.isCompleted)}\n        />\n        <label>{props.todo.title}</label>\n\n        <button\n          className=\"destroy\"\n          onClick={() => props.onDestroy(props.todo)}\n        />\n      </div>\n      {/* <input\n        ref=\"editField\"\n        className=\"edit\"\n        value={this.state.editText}\n        onBlur={e => this.handleSubmit(e)}\n        onChange={e => this.handleChange(e)}\n        onKeyDown={e => this.handleKeyDown(e)}\n      /> */}\n    </li>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onToggle: (todo: ITodo, isCompleted: boolean) => {\n      const phet: ITodo = {\n        ...todo,\n        isCompleted\n      };\n      dispatch(updateTodo(todo, phet));\n    },\n    onDestroy: (todo: ITodo) => {\n      dispatch(removeTodo(todo));\n    }\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ToDoItem);\n","import { ITodo } from \"../../typings\";\nimport * as ACTION from \"../types\";\n\nexport const addTodo = (title: string) => {\n  const newTodo: ITodo = {\n    title,\n    isCompleted: false,\n    createdAt: new Date().toISOString()\n  };\n  return {\n    type: ACTION.ADD_TODO,\n    payload: newTodo\n  };\n};\n\nexport const removeTodo = (todo: ITodo) => {\n  return {\n    type: ACTION.REMOVE_TODO,\n    payload: todo\n  };\n};\n\nexport const updateTodo = (todo: ITodo, updatedTodo: ITodo) => {\n  return {\n    type: ACTION.UPDATE_TODO,\n    payload: {\n      todo,\n      updatedTodo\n    }\n  };\n};\n\nexport const updateVisibilityFilter = (visibility: string) => {\n  return {\n    type: ACTION.UPDATE_VISIBILITY_FILTER,\n    payload: visibility\n  };\n};\n\nexport const clearAllDone = () => {\n  return {\n    type: ACTION.CLEAR_ALL_DONE\n  };\n};\n","export const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const UPDATE_TODO = \"UPDATE_TODO\";\nexport const UPDATE_VISIBILITY_FILTER = \"UPDATE_VISIBILITY_FILTER\";\nexport const CLEAR_ALL_DONE = \"CLEAR_ALL_DONE\";\n// UNDO - RED0\nexport const UNDO = \"UNDO\";\nexport const REDO = \"REDO\";\n","import * as React from \"react\";\nimport { ITodo } from \"../../typings\";\nimport Item from \"./item\";\n\nexport interface IListProps {\n  todos: ITodo[];\n}\n\nexport const ListTodo = ({ todos }: IListProps) => {\n  return (\n    <ul className=\"phet-list\">\n      {todos.map((todo: ITodo) => {\n        return <Item todo={todo} key={todo.createdAt} />;\n      })}\n    </ul>\n  );\n};\n","import * as React from \"react\";\nimport classNames from \"classnames\";\nexport interface IFooterProps {\n  count: number;\n  completedCount: number;\n  nowShowing: string;\n  onClearCompleted: () => any;\n  updateVisibilityFilter: (visibility: string) => any;\n}\n\nexport function Footer(props: IFooterProps) {\n  const activeTodoWord = \"item\";\n  var clearButton = null;\n\n  if (props.completedCount > 0) {\n    clearButton = (\n      <button className=\"clear-completed\" onClick={props.onClearCompleted}>\n        Clear completed\n      </button>\n    );\n  }\n  const switchFilter = (visibility: string) => {\n    props.updateVisibilityFilter && props.updateVisibilityFilter(visibility);\n  };\n\n  const nowShowing = props.nowShowing;\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{props.count}</strong> {activeTodoWord} left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            onClick={(event: React.SyntheticEvent) => {\n              event.preventDefault();\n              switchFilter(\"all\");\n            }}\n            className={classNames({ selected: nowShowing === \"all\" })}\n          >\n            All\n          </a>\n        </li>{\" \"}\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={(event: React.SyntheticEvent) => {\n              event.preventDefault();\n              switchFilter(\"active\");\n            }}\n            className={classNames({ selected: nowShowing === \"active\" })}\n          >\n            Active\n          </a>\n        </li>{\" \"}\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={(event: React.SyntheticEvent) => {\n              event.preventDefault();\n              switchFilter(\"completed\");\n            }}\n            className={classNames({ selected: nowShowing === \"completed\" })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      {clearButton}\n    </footer>\n  );\n}\n","import * as ACTION from \"../types\";\n\nexport const undo = () => {\n  return {\n    type: ACTION.UNDO\n  };\n};\n\nexport const redo = () => {\n  return {\n    type: ACTION.REDO\n  };\n};\n","import React, { Dispatch } from \"react\";\nimport { undo, redo } from \"../../store/actions/history\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../typings\";\nimport { AnyAction } from \"redux\";\n\nexport interface IUndoRedoProps {\n  canUndo: boolean;\n  canRedo: boolean;\n  onUndo: () => void;\n  onRedo: () => void;\n}\n\nlet UndoRedo = ({ canUndo, canRedo, onUndo, onRedo }: IUndoRedoProps) => (\n  <div\n    style={{\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      height: 60,\n      paddingLeft: 20,\n      paddingRight: 20\n    }}\n  >\n    <button onClick={() => onUndo()} disabled={!canUndo}>\n      Undo\n    </button>\n    <button onClick={() => onRedo()} disabled={!canRedo}>\n      Redo\n    </button>\n  </div>\n);\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    canUndo: state.past.length > 0,\n    canRedo: state.future.length > 0\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n  return {\n    onUndo: () => dispatch(undo()),\n    onRedo: () => dispatch(redo())\n  };\n};\n\nconst UndoRedoConnected = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UndoRedo);\n\nexport default UndoRedoConnected;\n","import * as React from \"react\";\n\nimport { ListTodo } from \"./list\";\nimport { connect } from \"react-redux\";\nimport { AppState, ITodo } from \"../../typings\";\nimport {\n  addTodo,\n  updateVisibilityFilter,\n  clearAllDone\n} from \"../../store/actions/todos\";\nimport { Footer } from \"./footer\";\nimport UndoRedoConnected from \"./undo\";\nexport interface IHomeProps {\n  todos: ITodo[];\n  nowShowing: string;\n  addTodo: (title: string) => any;\n  updateVisibilityFilter: (title: string) => any;\n  clearAllDone: () => void;\n}\n\nexport interface IHomeState {\n  input: string;\n}\n\nclass Home extends React.Component<IHomeProps, IHomeState> {\n  constructor(props: IHomeProps) {\n    super(props);\n    this.state = {\n      input: \"\"\n    };\n  }\n  handleNewTodoKeyDown = (event: React.KeyboardEvent) => {\n    if (event.keyCode !== 13 || !this.state.input) {\n      return;\n    }\n    event.preventDefault();\n    this.props.addTodo(this.state.input);\n    this.setState({\n      input: \"\"\n    });\n  };\n\n  completedCount = () => {\n    const completedTodos = this.props.todos.filter(\n      (item: ITodo) => item.isCompleted\n    );\n\n    return completedTodos.length;\n  };\n\n  public render() {\n    const activeList = this.props.todos.filter((todo: ITodo) => {\n      if (this.props.nowShowing === \"all\") return todo;\n      if (this.props.nowShowing === \"active\") return todo.isCompleted === false;\n      if (this.props.nowShowing === \"completed\")\n        return todo.isCompleted === true;\n    });\n    return (\n      <div className=\"phet\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            ref=\"newTodo\"\n            value={this.state.input}\n            onKeyDown={this.handleNewTodoKeyDown}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) => {\n              const target = event.currentTarget as HTMLInputElement;\n              if (target) {\n                this.setState({ input: target.value });\n              }\n            }}\n          />\n        </header>\n        <UndoRedoConnected />\n\n        <ListTodo todos={activeList} />\n        <Footer\n          count={this.props.todos.length}\n          completedCount={this.completedCount()}\n          nowShowing={this.props.nowShowing}\n          updateVisibilityFilter={this.props.updateVisibilityFilter}\n          onClearCompleted={this.props.clearAllDone}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => {\n  // console.log(\"state:\", state);\n  return {\n    todos: state.present.todos.todos,\n    nowShowing: state.present.todos.visibilityFilter\n  };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    addTodo: (title: string) => {\n      dispatch(addTodo(title));\n    },\n    updateVisibilityFilter: (visibility: string) => {\n      dispatch(updateVisibilityFilter(visibility));\n    },\n    clearAllDone: () => {\n      dispatch(clearAllDone());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Home);\n","import { ITodoStore, ITodo } from \"../../typings\";\nimport { AnyAction } from \"redux\";\nimport * as ACTION from \"../types\";\nconst todoInitialState: ITodoStore = {\n  todos: [],\n  visibilityFilter: \"all\"\n};\nexport const todos = (\n  state: ITodoStore = todoInitialState,\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case ACTION.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    case ACTION.REMOVE_TODO:\n      const removedTodo: ITodo = action.payload;\n      const newTodos = state.todos.filter((todo: ITodo) => {\n        return (\n          todo.title !== removedTodo.title &&\n          todo.createdAt !== removedTodo.createdAt\n        );\n      });\n      return {\n        ...state,\n        todos: newTodos\n      };\n\n    case ACTION.UPDATE_TODO:\n      const {\n        todo,\n        updatedTodo\n      }: { todo: ITodo; updatedTodo: ITodo } = action.payload;\n      const newList = state.todos.map((item: ITodo) => {\n        if (item.title === todo.title && item.createdAt === todo.createdAt) {\n          return updatedTodo;\n        }\n        return item;\n      });\n      return {\n        ...state,\n        todos: newList\n      };\n\n    case ACTION.UPDATE_VISIBILITY_FILTER:\n      return {\n        ...state,\n        visibilityFilter: action.payload\n      };\n\n    case ACTION.CLEAR_ALL_DONE:\n      const clearAllDone = state.todos.filter(\n        (todo: ITodo) => !todo.isCompleted\n      );\n      return {\n        ...state,\n        todos: clearAllDone\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { todos } from \"./todos\";\n\nexport const reducer = combineReducers({\n  todos: todos\n});\n","import { createStore } from \"redux\";\nimport { reducer } from \"./reducers\";\nimport { undoable } from \"./reducers/history\";\n\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, undoable(reducer));\n\n/* tslint:disable */\nexport const store = createStore(\n  persistedReducer, /* preloadedState, */\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n/* tslint:enable */\nexport const persistor = persistStore(store);\n","import * as ACTION from \"../types\";\nimport { AnyAction } from \"redux\";\nimport { ISnapShoot, AppState } from \"../../typings\";\n\nexport const undoable = (reducer: any) => {\n  const historyInitialState: AppState = {\n    past: [],\n    present: reducer(undefined, {}),\n    future: []\n  };\n  return (state = historyInitialState, action: AnyAction) => {\n    const { past, present, future } = state;\n    switch (action.type) {\n      case ACTION.UNDO:\n        const previous: ISnapShoot = past[past.length - 1];\n        const newPast: ISnapShoot[] = past.slice(0, past.length - 1);\n        return {\n          past: newPast,\n          present: previous,\n          future: [present, ...future]\n        };\n      case ACTION.REDO:\n        const next: ISnapShoot = future[0];\n        const newFuture: ISnapShoot[] = future.slice(1);\n        return {\n          past: [...past, present],\n          present: next,\n          future: newFuture\n        };\n      default:\n        const newPresent: ISnapShoot = reducer(present, action);\n        if (present === newPresent) {\n          return state;\n        }\n        return {\n          past: [...past, present],\n          present: newPresent,\n          future: []\n        };\n    }\n  };\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./screens/home\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Home />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}